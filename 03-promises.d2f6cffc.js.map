{"mappings":"iiBAaA,IAAAA,EAAAC,EAAA,SAM6C,SAAlCC,EAAcC,EAAUC,GACf,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEM,SAAAT,EAAUU,MAAAT,IAGpBG,EAAO,CAAEK,SAAAT,EAAUU,MAAAT,G,GAEpBA,E,IAGJU,MAAK,SAAAC,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAEjBG,EAAAhB,GAASiB,OAAOC,QACZ,qBAAoCC,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IAGjDO,OAAM,SAAAL,G,IAAGH,EAAQG,EAARH,SAAUC,EAAKE,EAALF,MAElBG,EAAAhB,GAASiB,OAAOI,QACV,oBAAmCF,OAAfP,EAAS,QAAYO,OAANN,EAAM,M,IA1BtCS,SAASC,cAAc,SAgC/BC,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAMN,IAJA,IAAMb,EAAQc,OAAOF,EAAMG,OAAOf,MAAMgB,OAClCC,EAAOH,OAAOF,EAAMG,OAAOE,KAAKD,OAChCE,EAASJ,OAAOF,EAAMG,OAAOG,OAAOF,OAEjCG,EAAI,EAAGA,EAAID,EAAQC,IAC1B9B,EAAc8B,EAAI,EAAGnB,EAAQmB,EAAIF,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \n// стільки разів, скільки ввели в поле amount.\n// Під час кожного виклику передай їй номер промісу(position), \n// що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, \n// який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay\n//  зі значеннями однойменних параметрів.\n// Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - \n// виконати або відхилити.\n\n// Імпортуємо бібліотеку\nimport Notiflix from 'notiflix';\n\n// //  Отримуємо форму\nconst form = document.querySelector('.form');\n\n// Доповнюємо функцію promis і setTimeOut. Дописуємо умову then і catch (бібліотека Notiflix.Notify.success && Notiflix.Notify.failure)\n  function createPromise(position, delay) {\n    const promise = new Promise((resolve, reject) => {\n      const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => {\n        if (shouldResolve) {\n          // Fulfill\n          resolve({ position, delay });\n        } else {\n          // Reject\n          reject({ position, delay });\n        }\n      }, delay);\n    });\n    promise\n    .then(({ position, delay }) => {\n      // console.log(`✅ Fulfilled Promise ${position} in ${delay}ms`);\n      Notiflix.Notify.success(\n          `Fulfilled Promise ${position} in ${delay}ms`\n        );\n  })\n  .catch(({ position, delay }) => {\n    // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    Notiflix.Notify.failure(\n          `Rejected promise ${position} in ${delay}ms`\n        );\n  });\n}\n\n// //  Створюємо слухача події + в слухачі застосовуємо цикл\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  \n  const delay = Number(event.target.delay.value);\n  const step = Number(event.target.step.value);\n  const amount = Number(event.target.amount.value);\n  \n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, delay + i * step)\n  }\n});\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position1","delay1","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","position","delay","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","document","querySelector","addEventListener","event","preventDefault","Number","target","value","step","amount","i"],"version":3,"file":"03-promises.d2f6cffc.js.map"}